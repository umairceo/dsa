public class Tree {
    /*
    private class Node{
        private int value;
        private Node leftChild;
        private Node rightChild;

        public Node(int value){
            this.value=value;

        }

        @Override
        public String toString() {
            return " value=" + value;}
    }



    private Node root;

    public void insert(int value){
        if (root==null){
            root=new Node(value);
            return;
        }
        var current =root;

        while (true){
            if (value<current.value){
                if (current.leftChild==null){
                    current.leftChild=new Node(value);
                    break;
                }
                current=current.leftChild;
            }
            else {
                if (current.rightChild==null){
                    current.rightChild=new Node(value);
                    break;
                }
                current=current.rightChild;
            }
        }
    }


    public boolean find(int value){
        var current=root;
        while (current!=null){
            if (value<current.value){
                current=current.leftChild;
            }
            else if (value>current.value){
                current=current.rightChild;

            }
            else {
                return true;
            }

        }
        return false;
    }


    public void TraversePreOrder(){
        TraversePreOrder(root);
    }
    private void TraversePreOrder(Node root){
        if (root == null){
            return;
        }
        System.out.println(root.value+" ");
        TraversePreOrder(root.leftChild);
        TraversePreOrder(root.rightChild);
    }


    public void TraverseInOrderAsc(){
        TraverseInOrderAsc(root);
    }
    private void TraverseInOrderAsc(Node root){
        if (root == null){
            return;
        }
        TraverseInOrderAsc(root.leftChild);
        System.out.println(root.value+" ");
        TraverseInOrderAsc(root.rightChild);
    }


    public void TreversePostOrder(){
        TreversePostOrder(root);
    }
    private void TreversePostOrder(Node root){
        if (root==null)
            return;

        TreversePostOrder(root.leftChild);
        TreversePostOrder(root.rightChild);
        System.out.println(root.value+" ");
    }

        public void min(){
        min(root);
    }
    private int min(Node root){

        if (root==null)
            new IllegalAccessError();
        var current=root;
        var last=current;

        while (current!=null){
            last=current;
            current=current.leftChild;
        }
        return last.value;
    }


    private int max(Node root){
        if (root==null)
            throw new RuntimeException();


        var current=root;
        var last=current;
        while (current!=null){
            last=current;
            current=current.rightChild;

        }
        return last.value;
    }


    public boolean equal(Tree ohter){
        if (ohter==null){
            return false;
        }
        return equal(root,ohter.root);
    }
    private boolean equal(Node first,Node second){
        if (first==null && second==null){
            return true;
        }

        else if (first!=null &&second!=null) {
            return first.value == second.value
                    && equal(first.leftChild, second.leftChild)
                    && equal(first.rightChild, second.rightChild);
        }

        else {
            return false;
        }
    }




*/

    

}
